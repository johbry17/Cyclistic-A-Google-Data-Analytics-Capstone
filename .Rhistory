ggplot(data=penguins)+geom_point(mapping=aes(x=flipper_length_mm,y=body_mass_g,color=species))+facet_grid(sex~species)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type~market_segment) +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = hotel_bookings) +
geom_point(mapping = aes(x = lead_time, y = children))
ggplot(data = hotel_bookings) +
geom_point(mapping = aes(x = lead_time, y = children))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel, fill = market_segment))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel)) +
facet_wrap(~market_segment)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel, color=hotel)) +
facet_wrap(~market_segment)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel,fill=hotel)) +
facet_wrap(~market_segment)
install.packages('tidyverse')
library(tidyverse)
install.packages("tidyverse")
onlineta_city_hotels <- filter(hotel_bookings,
(hotel=="City Hotel" &
hotel_bookings$market_segment=="Online TA"))
View(onlineta_city_hotels)
onlineta_city_hotels_v2 <- hotel_bookings %>%
filter(hotel=="City Hotel") %>%
filter(market_segment=="Online TA")
View(onlineta_city_hotels_v2)
ggplot(data = onlineta_city_hotels) +
geom_point(mapping = aes(x = lead_time, y = children))
View(onlineta_city_hotels_v2)
ggplot(data = onlineta_city_hotels) +
geom_point(mapping = aes(x = lead_time, y = children))+labs(title="It's Alive!!!")
ggplot(data = onlineta_city_hotels) +
geom_point(mapping = aes(x = lead_time, y = children))+labs(title="It's Alive!!!",subtitle="Entertaining myself")
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
labs(title="Hotel type by market segment")
min(hotel_bookings$arrival_date_year)
max(hotel_bookings$arrival_date_year)
mindate <- min(hotel_bookings$arrival_date_year)
maxdate <- max(hotel_bookings$arrival_date_year)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
subtitle=paste0("Data from: ", mindate, " to ", maxdate))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
caption=paste0("Data from: ", mindate, " to ", maxdate))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
caption=paste0("Data from: ", mindate, " to ", maxdate),
x="Market Segment",
y="Number of Bookings")
ggsave('hotel_booking_chart.png')
library(diamonds)
install.packages(diamonds)
data(diamonds)
---
title: 'Lesson 4: Annotating and Saving'
ggplot(data = diamonds) + geom_bar(mapping = aes(x = color, fill = cut)) + facet_wrap(~clarity)
View(diamonds)
install.packages("rmarkdown")
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
head(cars)
head(pressure)
View(penguins)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
library(ggplot2)
library(palmerpenguins)
data(penguins)
View(penguins)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
getwd()
setwd("Cyclistic-A-Google-Data-Analytics-Capstone/")
list.files()
source("C:/Users/johbr/Data-Analyst/Projects/Cyclistic-A-Google-Data-Analytics-Capstone/data_cleaning.R", echo=TRUE)
source("C:/Users/johbr/Data-Analyst/Projects/Cyclistic-A-Google-Data-Analytics-Capstone/data_cleaning.R", echo=TRUE)
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge")
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
group_by(member_casual, weekday) %>%  #groups by usertype and weekday
summarise(number_of_rides = n()							#calculates the number of rides and average duration
,average_duration = mean(ride_length)) %>% 		# calculates the average duration
arrange(member_casual, weekday)								# sorts
View(all_trips)
View(all_trips_v2)
View(counts)
View(q1_2019)
View(q1_2020)
View(counts)
source("C:/Users/johbr/Data-Analyst/Projects/Cyclistic-A-Google-Data-Analytics-Capstone/data_cleaning.R", echo=TRUE)
summary(all_trips_v2$ride_length)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
p <- all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
ggsave("ride_count.png", plot = p)
source("C:/Users/johbr/Data-Analyst/Projects/Cyclistic-A-Google-Data-Analytics-Capstone/data_cleaning.R", echo=TRUE)
View(all_trips)
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
p <- all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
ggsave("./resources/images/rides_per_day_2019q1_2020q1.png", plot = p)
p <- all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge") +
theme(legend.position = "none", axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("./resources/images/rides_per_day_2019q1_2020q1.png", plot = p)
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge")
p <- all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
theme(legend.position = "none", axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("./resources/images/average_duration_2019q1_2020q1.png", plot = p)
p <- all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("./resources/images/rides_per_day_2019q1_2020q1.png", plot = p)
p <- all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("./resources/images/rides_per_day_2019q1_2020q1.png", plot = p)
p <- all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, hjust = 1))
ggsave("./resources/images/average_duration_2019q1_2020q1.png", plot = p)
library(tidyverse)  #helps wrangle data
# Use the conflicted package to manage conflicts
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
q1_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q1.csv")
q1_2020 <- read_csv("./resources/data/Divvy_Trips_2020_Q1.csv")
q1_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q1.csv")
q1_2020 <- read_csv("./resources/data/Divvy_Trips_2020_Q1.csv")
colnames(q1_2019)
colnames(q1_2020)
library(tidyverse)  #helps wrangle data
# Use the conflicted package to manage conflicts
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
q1_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q1.csv")
q2_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("./resources/data/Divvy_Trips_2020_Q1.csv")
colnames(q1_2019)
colnames(q4_2019)
colnames(q1_2020)
rename_columns <- function(df) {
df <- rename(df,
ride_id = trip_id,
rideable_type = bikeid,
started_at = start_time,
ended_at = end_time,
start_station_name = from_station_name,
start_station_id = from_station_id,
end_station_name = to_station_name,
end_station_id = to_station_id,
member_casual = usertype)
return(df)
}
rename_columns(q1_2019)
rename_columns(q2_2019)
View(q2_2019)
View(q3_2019)
View(q2_2019)
View(q1_2020)
View(q1_2019)
View(q2_2019)
View(q3_2019)
View(q4_2019)
View(q3_2019)
View(q2_2019)
rename_columns(q1_2019)
rename_columns(q3_2019)
rename_columns(q4_2019)
View(q4_2019)
View(q1_2019)
View(q1_2020)
View(q1_2019)
View(q1_2020)
q1_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q1.csv")
q2_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("./resources/data/Divvy_Trips_2020_Q1.csv")
colnames(q1_2019)
colnames(q1_2020)
View(q1_2019)
rename_columns <- function(df) {
df <- rename(df,
ride_id = trip_id,
rideable_type = bikeid,
started_at = start_time,
ended_at = end_time,
start_station_name = from_station_name,
start_station_id = from_station_id,
end_station_name = to_station_name,
end_station_id = to_station_id,
member_casual = usertype)
return(df)
}
rename_columns(q1_2019)
View(q1_2019)
View(q1_2019)
View(q1_2020)
View(q1_2019)
q1_2019 <- rename_columns(q1_2019)
View(q1_2019)
View(q1_2020)
View(q1_2019)
q3_2019 <- rename_columns(q3_2019)
q4_2019 <- rename_columns(q4_2019)
View(q3_2019)
View(q4_2019)
View(q3_2019)
View(q2_2019)
View(q1_2020)
View(q2_2019)
colnames(q2_2019)
View(q1_2019)
q2_2019 <- rename(q2_2019,
ride_id = "01 - Rental Details Rental ID",
rideable_type = "01 - Rental Details Bike ID",
started_at = "01 - Rental Details Local Start Time",
ended_at = "01 - Rental Details Local End Time",
tripduration = "01 - Rental Details Duration In Seconds Uncapped",
start_station_name = "03 - Rental Start Station Name",
start_station_id = "03 - Rental Start Station ID",
end_station_name = "02 - Rental End Station Name",
end_station_id = "02 - Rental End Station ID",
member_casual = "User Type",
gender = "Member Gender",
birthyear = "05 - Member Details Member Birthday Year"
)
View(q1_2020)
rename_columns <- function(df) {
df <- rename(df,
ride_id = trip_id,
rideable_type = bikeid,
started_at = start_time,
ended_at = end_time,
start_station_name = from_station_name,
start_station_id = from_station_id,
end_station_name = to_station_name,
end_station_id = to_station_id,
member_casual = usertype)
return(df)
}
q1_2019 <- rename_columns(q1_2019)
str(q1_2019)
str(q1_2020)
library(tidyverse)  #helps wrangle data
# Use the conflicted package to manage conflicts
library(conflicted)
# Set dplyr::filter and dplyr::lag as the default choices
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
#=====================
# STEP 1: COLLECT DATA
#=====================
# # Upload Divvy datasets (csv files) here
q1_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q1.csv")
q2_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("./resources/data/Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("./resources/data/Divvy_Trips_2020_Q1.csv")
#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================
# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file
colnames(q1_2019) # same with all of 2019...
colnames(q1_2020) # ...which is different from 2020
# Rename columns  to make them consistent with q1_2020 (as this will be the supposed going-forward table design for Divvy)
# Q2 is wildly different from the rest of the Q's
q2_2019 <- rename(q2_2019,
ride_id = "01 - Rental Details Rental ID",
rideable_type = "01 - Rental Details Bike ID",
started_at = "01 - Rental Details Local Start Time",
ended_at = "01 - Rental Details Local End Time",
tripduration = "01 - Rental Details Duration In Seconds Uncapped",
start_station_name = "03 - Rental Start Station Name",
start_station_id = "03 - Rental Start Station ID",
end_station_name = "02 - Rental End Station Name",
end_station_id = "02 - Rental End Station ID",
member_casual = "User Type",
gender = "Member Gender",
birthyear = "05 - Member Details Member Birthday Year"
)
rename_columns <- function(df) {
df <- rename(df,
ride_id = trip_id,
rideable_type = bikeid,
started_at = start_time,
ended_at = end_time,
start_station_name = from_station_name,
start_station_id = from_station_id,
end_station_name = to_station_name,
end_station_id = to_station_id,
member_casual = usertype)
return(df)
}
q1_2019 <- rename_columns(q1_2019)
q3_2019 <- rename_columns(q3_2019)
q4_2019 <- rename_columns(q4_2019)
# Inspect the dataframes and look for incongruencies
str(q1_2019)
str(q1_2019)
str(q1_2020)
View(q1_2019)
View(q1_2020)
View(q1_2019)
View(q1_2020)
q1_2019 <-  mutate(q1_2019, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
View(q2_2019)
convert_columns_to_character <- function(df) {
df <- mutate(df,
ride_id = as.character(ride_id),
rideable_type = as.character(rideable_type))
return(df)
}
# Apply the function to each quarter's data frame
q1_2019 <- convert_columns_to_character(q1_2019)
q2_2019 <- convert_columns_to_character(q2_2019)
q3_2019 <- convert_columns_to_character(q3_2019)
q4_2019 <- convert_columns_to_character(q4_2019)
all_trips <- bind_rows(q1_2019, q2_2019, q3_2019, q4_2019, q1_2020)
all_trips <- all_trips %>%
select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender,  "tripduration"))
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numerics
table(all_trips$member_casual)
all_trips <-  all_trips %>%
mutate(member_casual = recode(member_casual
,"Subscriber" = "member"
,"Customer" = "casual"))
table(all_trips$member_casual)
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
str(all_trips)
View(all_trips)
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride
summary(all_trips_v2$ride_length)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
group_by(member_casual, weekday) %>%  #groups by usertype and weekday
summarise(number_of_rides = n()							#calculates the number of rides and average duration
,average_duration = mean(ride_length)) %>% 		# calculates the average duration
arrange(member_casual, weekday)								# sorts
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, hjust = 1))
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, hjust = 1))
source("C:/Users/johbr/Data-Analyst/Projects/Cyclistic-A-Google-Data-Analytics-Capstone/data_cleaning_v1.R", echo=TRUE)
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, hjust = 1))
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, hjust = 1))
source("~/.active-rstudio-document", echo=TRUE)
View(counts)
